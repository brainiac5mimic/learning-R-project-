> library("ShortRead")
> 
> sampler <- FastqSampler("SP1.fq")
> fq <- yield(sampler)
> head(sread(fq), 5)
  A DNAStringSet instance of length 5
    width seq
[1]    31 TTTCCGGGGCACATAATCTTCAGCCGGGCGC
[2]    31 TATCCTTGCAATACTCTCCGAACGGGAGAGC
[3]    31 GCAGTTTAAGATCATTTTATTGAAGAGCAAG
[4]    31 GGCATTGCAAAATTTATTACACCCCCAGATC
[5]    31 CCCCCTTAAATAGCTGTTTATTTGGCCCCAG
> # Quality reads
> encoding(quality(fq))
 !  "  #  $  %  &  '  (  )  *  +  ,  -  .  /  0  1  2  3  4  5  6  7  8  9  : 
 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 
 ;  <  =  >  ?  @  A  B  C  D  E  F  G  H  I  J  K  L  M  N  O  P  Q  R  S  T 
26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 
 U  V  W  X  Y  Z  [ \\  ]  ^  _  `  a  b  c  d  e  f  g  h  i  j  k  l  m  n 
52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 
 o  p  q  r  s  t  u  v  w  x  y  z  {  |  }  ~ 
78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 
> head(quality(fq), 5)
class: FastqQuality
quality:
  A BStringSet instance of length 5
    width seq
[1]    31 9C;=;=<9@4868>9:67AA<9>65<=>591
[2]    31 1/04.72,(003,-2-22+00-12./.-.4-
[3]    31 ?7?AEEC@>=1?A?EEEB9ECB?==:B.A?A
[4]    31 >=2.660/?:36AD;0<14703640334-//
[5]    31 8;;;>DC@DAC=B?C@9?B?CDCB@><<??A
> 
> fls <- "SP1.fq"
> qaSummary <- qa(fls, type="fastq")
> 
> #browseURL(report(qaSummary))
> 
> qaSummary
class: FastqQA(10)
QA elements (access with qa[["elt"]]):
  readCounts: data.frame(1 3)
  baseCalls: data.frame(1 5)
  readQualityScore: data.frame(512 4)
  baseQuality: data.frame(95 3)
  alignQuality: data.frame(1 3)
  frequentSequences: data.frame(50 4)
  sequenceDistribution: data.frame(3 4)
  perCycle: list(2)
    baseCall: data.frame(124 4)
    quality: data.frame(812 5)
  perTile: list(2)
    readCounts: data.frame(0 4)
    medianReadQualityScore: data.frame(0 4)
  adapterContamination: data.frame(1 1)
> head(qaSummary[["readCounts"]])
       read filter aligned
SP1.fq  250     NA      NA
> head(qaSummary[["baseCalls"]])
          A    C    G    T N
SP1.fq 2064 2046 1268 2372 0
> 
> 
> #filtering
> 
>  
> 
>  ## trim and filter, e.g., reads cannot contain 'N'...
>  fq <- fq[nFilter()(fq)] # see ?srFilter for pre-defined filters
> 
> ## trim as soon as 2 of 5 nucleotides has quality encoding less
> ## than "4" (phred score 20)
>  fq <- trimTailw(fq, 2, "4", 2)
> 
>  ## drop reads that are less than 36nt
>  fq <- fq[width(fq) >= 10]
> 
>  ## append to destination
> file <- "C:/Users/Mark Holton/Documents/R/new.fq"
>  writeFastq(fq,file,compress=FALSE)
>  
> 
> 
>  fq
class: ShortReadQ
length: 193 reads; width: 10..31 cycles
> 
> strm <- FastqStreamer("SP1.fq")
> 
> ##loop that goes through part of the data at a time.
> 
> repeat {
+  fq2 <- yield(strm)
+  if (length(fq2) == 0)
+  break
+  ## process chunk
+  
+ 
+  ## trim and filter, e.g., reads cannot contain 'N'...
+  fq2 <- fq2[nFilter()(fq2)] # see ?srFilter for pre-defined filters
+ 
+ ## trim as soon as 2 of 5 nucleotides has quality encoding less
+ ## than "4" (phred score 20)
+  fq2 <- trimTailw(fq2, 2, "4", 2)
+ 
+  ## drop reads that are less than 36nt
+  fq2 <- fq2[width(fq2) >= 10]
+ 
+  ## append to destination
+ file <- "C:/Users/Mark Holton/Documents/R/new2.fq"
+  writeFastq(fq2,file,compress=FALSE)
+ 
+ }
> fq2
class: ShortReadQ
length: 0 reads; width:  cycles
> 
